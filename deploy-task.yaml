apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: >-
      Deploys the application to the CI environment for verification using the
      provided helm chart
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: 'https://github.com/IBM/ibm-garage-tekton-tasks'
    description: >-
      Deploys the application to the CI environment for verification using the
      provided helm chart
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"app.openshift.io/description":"Deploys
      the application to the CI environment for verification using the provided
      helm
      chart","app.openshift.io/vcs-ref":"master","app.openshift.io/vcs-uri":"https://github.com/IBM/ibm-garage-tekton-tasks","description":"Deploys
      the application to the CI environment for verification using the provided
      helm
      chart"},"labels":{"version":"2.7.1"},"name":"ibm-deploy-v2-7-1","namespace":"tools"},"spec":{"params":[{"name":"git-url"},{"default":"master","name":"git-revision"},{"default":"/source","name":"source-dir"},{"default":"","name":"image-server"},{"default":"","name":"image-namespace"},{"default":"","name":"image-repository"},{"default":"","name":"image-tag"},{"default":"","name":"app-namespace"},{"default":"","name":"app-name"},{"default":"route","name":"deploy-ingress-type"},{"default":"quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4","name":"tools-image"}],"results":[{"name":"service-port"},{"name":"resource-type"}],"stepTemplate":{"volumeMounts":[{"mountPath":"$(params.source-dir)","name":"source"}]},"steps":[{"env":[{"name":"GIT_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"git-credentials","optional":true}}},{"name":"GIT_USERNAME","valueFrom":{"secretKeyRef":{"key":"username","name":"git-credentials","optional":true}}}],"image":"quay.io/ibmgaragecloud/alpine-git","name":"git-clone","script":"set
      +x\nif [[ -n \"${GIT_USERNAME}\" ]] \u0026\u0026 [[ -n \"${GIT_PASSWORD}\"
      ]]; then\n    git clone \"$(echo $(params.git-url) | awk -F '://' '{print
      $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F
      '://' '{print $2}')\" $(params.source-dir)\nelse\n    set -x\n    git
      clone $(params.git-url) $(params.source-dir)\nfi\nset -x\ncd
      $(params.source-dir)\ngit checkout
      $(params.git-revision)\n"},{"env":[{"name":"TLS_SECRET_NAME","valueFrom":{"configMapKeyRef":{"key":"TLS_SECRET_NAME","name":"ibmcloud-config","optional":true}}},{"name":"INGRESS_SUBDOMAIN","valueFrom":{"configMapKeyRef":{"key":"INGRESS_SUBDOMAIN","name":"ibmcloud-config","optional":true}}}],"image":"$(params.tools-image)","name":"deploy","script":"#!/usr/bin/env
      bash\nset
      -ex\nGIT_URL=\"$(params.git-url)\"\nGIT_REVISION=\"$(params.git-revision)\"\nAPP_NAMESPACE=\"$(params.app-namespace)\"\nAPP_NAME=\"$(params.app-name)\"\nif
      [[ -z \"${APP_NAME}\" ]]; then\n 
      APP_NAME=\"$(params.image-repository)\"\nfi\nIMAGE_SERVER=\"$(params.image-server)\"\nIMAGE_NAMESPACE=\"$(params.image-namespace)\"\nIMAGE_REPOSITORY=\"$(params.image-repository)\"\nIMAGE_VERSION=\"$(params.image-tag)\"\nIMAGE_URL=\"${IMAGE_SERVER}/${IMAGE_NAMESPACE}/${IMAGE_REPOSITORY}\"\nINGRESS_TYPE=\"$(params.deploy-ingress-type)\"\nif
      [[ \"${INGRESS_TYPE}\" == \"route\" ]]; then\n  ROUTE_ENABLED=\"true\"\n 
      INGRESS_ENABLED=\"false\"\nelse\n  ROUTE_ENABLED=\"false\"\n 
      INGRESS_ENABLED=\"true\"\nfi\n\nexport CHART_ROOT=$(find . -name
      chart)\necho \"CHART_ROOT: $CHART_ROOT\"\n\nFILE_NUM=$(find . -name
      'Chart*.yaml' |wc -l)\nif [[ \"${FILE_NUM}\" -gt 1 ]]; then\n  echo
      \"Error: Found \u003e1 Chart*.yaml\"\n  exit 1\nfi\n\nexport CHART=$(find
      . -name 'Chart*.yaml')\necho \"CHART: $CHART\"\n\nexport CHART_NAME=$(cat
      $CHART | yq r - name)\necho \"CHART_NAME: $CHART_NAME\"\n\n# Update Chart
      name and version\nif [[ \"${CHART_NAME}\" != \"${APP_NAME}\" ]]; then\n 
      echo \"Renaming chart from ${CHART_NAME} to ${APP_NAME}\"\n  cp -R
      \"${CHART_ROOT}/${CHART_NAME}\" \"${CHART_ROOT}/${APP_NAME}\"\n  cat
      \"${CHART_ROOT}/${CHART_NAME}/Chart.yaml\" | \\\n      yq w - name
      \"${APP_NAME}\" | \\\n      yq w - version \"1.0.0-rc${IMAGE_VERSION}\"
      \u003e \"${CHART_ROOT}/${APP_NAME}/Chart.yaml\"\nelse\n  echo \"Chart name
      and image name match:
      ${APP_NAME}\"\nfi\n\nCHART_PATH=\"${CHART_ROOT}/${APP_NAME}\"\n\nRELEASE_NAME=\"${APP_NAME}\"\necho
      \"RELEASE_NAME: $RELEASE_NAME\"\n\necho $(helm version)\n\necho \"CHECKING
      CHART (lint)\"\nhelm lint ${CHART_PATH}\n\nPREFIX=\"\"\nif [[ -f
      \"${CHART_PATH}/requirements.yaml\" ]] || grep -Eq \"^dependencies:\"
      \"${CHART_PATH}/Chart.yaml\"; then\n   
      DEPENDENCY_FILE=\"${CHART_PATH}/Chart.yaml\"\n    if [[ -f
      \"${CHART_PATH}/requirements.yaml\" ]]; then\n       
      DEPENDENCY_FILE=\"${CHART_PATH}/requirements.yaml\"\n    fi\n\n   
      PREFIX=\"$(yq r -j \"${DEPENDENCY_FILE}\" | jq -r '.dependencies | .[] |
      .alias // .name' | head -1).\"\nfi\n\n# Update helm chart with repository
      and tag values\ncat ${CHART_PATH}/values.yaml | \\\n    yq w -
      \"${PREFIX}nameOverride\" \"${APP_NAME}\" | \\\n    yq w -
      \"${PREFIX}fullnameOverride\" \"${APP_NAME}\" | \\\n    yq w -
      \"${PREFIX}vcsInfo.repoUrl\" \"${GIT_URL}\" | \\\n    yq w -
      \"${PREFIX}vcsInfo.branch\" \"${GIT_REVISION}\" | \\\n    yq w -
      \"${PREFIX}image.repository\" \"${IMAGE_URL}\" | \\\n    yq w - --style
      single \"${PREFIX}image.tag\" \"${IMAGE_VERSION}\" | \\\n    yq w -
      \"${PREFIX}ingress.enabled\" \"${INGRESS_ENABLED}\" | \\\n    yq w -
      \"${PREFIX}route.enabled\" \"${ROUTE_ENABLED}\" \u003e
      ./values.yaml.tmp\ncp ./values.yaml.tmp ${CHART_PATH}/values.yaml\ncat
      ${CHART_PATH}/values.yaml\n\nhelm dep update \"${CHART_PATH}\"\n\n# Using
      'upgrade --install\" for rolling updates. Note that subsequent updates
      will occur in the same namespace the release is currently deployed in,
      ignoring the explicit--namespace argument\".\nhelm template
      ${RELEASE_NAME} ${CHART_PATH} \\\n    --namespace ${APP_NAMESPACE} \\\n   
      --set ${PREFIX}ingress.tlsSecretName=\"${TLS_SECRET_NAME}\" \\\n    --set
      ${PREFIX}ingress.subdomain=\"${INGRESS_SUBDOMAIN}\" \u003e
      ./release.yaml\n\necho -e \"Generated release yaml for:
      ${APP_NAMESPACE}/${APP_NAME}\"\ncat ./release.yaml\n\necho -e \"Deploying
      into: ${APP_NAMESPACE}/${APP_NAME}\"\nkubectl apply -n ${APP_NAMESPACE} -f
      ./release.yaml --validate=false \u003e results.out\ncat results.out\necho
      \"Waiting for rollout of ${APP_NAMESPACE}/${APP_NAME}\"\n\n\ncat
      results.out | \\\n  grep -E
      \"deployment|statefulset|integrationserver|queuemanager\" | \\\n  sed
      \"s/deployment.apps/deployment/g\" | \\\n  sed
      \"s/statefulset.apps/statefulset/g\" | \\\n  sed \"s/configured//g\" |
      \\\n  sed \"s/created//g\" | \\\n  sed \"s/unchanged//g\" | while read
      target; do\n  echo \"Waiting for rollout of ${target} in
      ${APP_NAMESPACE}\"\n  if [[ ${target} == *\"integrationserver\"* ]];
      then\n    kubectl wait --timeout=-1s --for=condition=Ready ${target}\n 
      elif [[ ${target} == *\"queuemanager\"* ]]; then\n    until [[ \"$(kubectl
      get ${target} -o 'jsonpath={.status.phase}')\" = \"Running\" ]];\n   
      do\n    sleep 5\n    echo \"Waiting for Queuemanager to be ready.\"\n   
      done\n  else\n    kubectl rollout status -n ${APP_NAMESPACE}
      ${target}\n    SERVICE_PORT=$(kubectl get svc \"${APP_NAME}\" -n
      \"${APP_NAMESPACE}\" -o jsonpath=\"{.spec.ports[?(@.name ==
      'http')].port}\")\n    echo -n \"${SERVICE_PORT}\" | tee
      $(results.service-port.path)\n  fi\n  echo -n \"${target}\" | cut -f1 -d /
      | tee
      $(results.resource-type.path)\ndone\n","workingDir":"$(params.source-dir)"}],"volumes":[{"emptyDir":{},"name":"source"}]}}
  selfLink: /apis/tekton.dev/v1beta1/namespaces/ritu/tasks/ibm-deploy-v2-7-1
  resourceVersion: '18958460'
  name: ibm-deploy-v2-7-1
  uid: 24c181f8-4530-4d13-bb43-ee92f1e4cee4
  creationTimestamp: '2021-08-03T14:55:59Z'
  generation: 6
  managedFields:
    - apiVersion: tekton.dev/v1alpha1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:app.openshift.io/description': {}
            'f:app.openshift.io/vcs-ref': {}
            'f:app.openshift.io/vcs-uri': {}
            'f:description': {}
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
          'f:labels':
            .: {}
            'f:version': {}
        'f:spec':
          .: {}
          'f:params': {}
          'f:results': {}
          'f:stepTemplate':
            .: {}
            'f:name': {}
            'f:resources': {}
            'f:volumeMounts': {}
          'f:volumes': {}
      manager: unknown
      operation: Update
      time: '2021-08-04T19:24:41Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          'f:steps': {}
      manager: Mozilla
      operation: Update
      time: '2021-08-04T20:03:41Z'
  namespace: ritu
  labels:
    version: 2.7.1
spec:
  params:
    - name: git-url
      type: string
    - default: master
      name: git-revision
      type: string
    - default: /source
      name: source-dir
      type: string
    - default: ''
      name: image-server
      type: string
    - default: ''
      name: image-namespace
      type: string
    - default: ''
      name: image-repository
      type: string
    - default: ''
      name: image-tag
      type: string
    - default: ''
      name: app-namespace
      type: string
    - default: ''
      name: app-name
      type: string
    - default: route
      name: deploy-ingress-type
      type: string
    - default: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
      name: tools-image
      type: string
  results:
    - description: ''
      name: service-port
    - description: ''
      name: resource-type
  stepTemplate:
    name: ''
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: git-credentials
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: git-credentials
              optional: true
      image: quay.io/ibmgaragecloud/alpine-git
      name: git-clone
      resources: {}
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - env:
        - name: TLS_SECRET_NAME
          valueFrom:
            configMapKeyRef:
              key: TLS_SECRET_NAME
              name: ibmcloud-config
              optional: true
        - name: INGRESS_SUBDOMAIN
          valueFrom:
            configMapKeyRef:
              key: INGRESS_SUBDOMAIN
              name: ibmcloud-config
              optional: true
      image: $(params.tools-image)
      name: deploy
      resources: {}
      script: >
        #!/usr/bin/env bash

        set -ex

        GIT_URL="$(params.git-url)"

        GIT_REVISION="$(params.git-revision)"

        APP_NAMESPACE="$(params.app-namespace)"

        APP_NAME="$(params.app-name)"

        if [[ -z "${APP_NAME}" ]]; then
          APP_NAME="$(params.image-repository)"
        fi

        IMAGE_SERVER="$(params.image-server)"

        IMAGE_NAMESPACE="$(params.image-namespace)"

        IMAGE_REPOSITORY="$(params.image-repository)"

        IMAGE_VERSION="$(params.image-tag)"

        IMAGE_URL="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/${IMAGE_REPOSITORY}"

        INGRESS_TYPE="$(params.deploy-ingress-type)"

        if [[ "${INGRESS_TYPE}" == "route" ]]; then
          ROUTE_ENABLED="true"
          INGRESS_ENABLED="false"
        else
          ROUTE_ENABLED="false"
          INGRESS_ENABLED="true"
        fi


        export CHART_ROOT=$(find . -name chart)

        echo "CHART_ROOT: $CHART_ROOT"


        FILE_NUM=$(find . -name 'Chart*.yaml' |wc -l)

        if [[ "${FILE_NUM}" -gt 1 ]]; then
          echo "Error: Found >1 Chart*.yaml"
          exit 1
        fi


        export CHART=$(find . -name 'Chart*.yaml')

        echo "CHART: $CHART"


        export CHART_NAME=$(cat $CHART | yq r - name)

        echo "CHART_NAME: $CHART_NAME"


        # Update Chart name and version

        if [[ "${CHART_NAME}" != "${APP_NAME}" ]]; then
          echo "Renaming chart from ${CHART_NAME} to ${APP_NAME}"
          cp -R "${CHART_ROOT}/${CHART_NAME}" "${CHART_ROOT}/${APP_NAME}"
          cat "${CHART_ROOT}/${CHART_NAME}/Chart.yaml" | \
              yq w - name "${APP_NAME}" | \
              yq w - version "1.0.0-rc${IMAGE_VERSION}" > "${CHART_ROOT}/${APP_NAME}/Chart.yaml"
        else
          echo "Chart name and image name match: ${APP_NAME}"
        fi


        CHART_PATH="${CHART_ROOT}/${APP_NAME}"


        RELEASE_NAME="${APP_NAME}"

        echo "RELEASE_NAME: $RELEASE_NAME"


        echo $(helm version)


        echo "CHECKING CHART (lint)"

        helm lint ${CHART_PATH}


        PREFIX=""

        if [[ -f "${CHART_PATH}/requirements.yaml" ]] || grep -Eq
        "^dependencies:" "${CHART_PATH}/Chart.yaml"; then
            DEPENDENCY_FILE="${CHART_PATH}/Chart.yaml"
            if [[ -f "${CHART_PATH}/requirements.yaml" ]]; then
                DEPENDENCY_FILE="${CHART_PATH}/requirements.yaml"
            fi

            PREFIX="$(yq r -j "${DEPENDENCY_FILE}" | jq -r '.dependencies | .[] | .alias // .name' | head -1)."
        fi


        # Update helm chart with repository and tag values

        cat ${CHART_PATH}/values.yaml | \
            yq w - "${PREFIX}nameOverride" "${APP_NAME}" | \
            yq w - "${PREFIX}fullnameOverride" "${APP_NAME}" | \
            yq w - "${PREFIX}vcsInfo.repoUrl" "${GIT_URL}" | \
            yq w - "${PREFIX}vcsInfo.branch" "${GIT_REVISION}" | \
            yq w - "${PREFIX}image.repository" "${IMAGE_URL}" | \
            yq w - --style single "${PREFIX}image.tag" "${IMAGE_VERSION}" | \
            yq w - "${PREFIX}ingress.enabled" "${INGRESS_ENABLED}" | \
            yq w - "${PREFIX}route.enabled" "${ROUTE_ENABLED}" > ./values.yaml.tmp
        cp ./values.yaml.tmp ${CHART_PATH}/values.yaml

        cat ${CHART_PATH}/values.yaml


        helm dep update "${CHART_PATH}"


        # Using 'upgrade --install" for rolling updates. Note that subsequent
        updates will occur in the same namespace the release is currently
        deployed in, ignoring the explicit--namespace argument".

        helm template ${RELEASE_NAME} ${CHART_PATH} \
            --namespace ${APP_NAMESPACE} \
            --set ${PREFIX}ingress.tlsSecretName="${TLS_SECRET_NAME}" \
            --set ${PREFIX}ingress.subdomain="${INGRESS_SUBDOMAIN}" > ./release.yaml

        echo -e "Generated release yaml for: ${APP_NAMESPACE}/${APP_NAME}"

        cat ./release.yaml


        echo -e "Deploying into: ${APP_NAMESPACE}/${APP_NAME}"

        kubectl apply -n ${APP_NAMESPACE} -f ./release.yaml --validate=false >
        results.out

        cat results.out

        echo "Waiting for rollout of ${APP_NAMESPACE}/${APP_NAME}"



        cat results.out | \
          grep -E "deployment|statefulset|integrationserver|queuemanager" | \
          sed "s/deployment.apps/deployment/g" | \
          sed "s/statefulset.apps/statefulset/g" | \
          sed "s/configured//g" | \
          sed "s/created//g" | \
          sed "s/unchanged//g" | while read target; do
          echo "Waiting for rollout of ${target} in ${APP_NAMESPACE}"
          if [[ ${target} == *"integrationserver"* ]]; then
            kubectl wait --timeout=-1s --for=condition=Ready ${target}
          elif [[ ${target} == *"queuemanager"* ]]; then
            until [[ "$(kubectl get ${target} -o 'jsonpath={.status.phase}')" = "Running" ]];
            do
            sleep 5
            echo "Waiting for Queuemanager to be ready."
            done
          else
            kubectl rollout status -n ${APP_NAMESPACE} ${target}
            SERVICE_PORT=$(kubectl get svc "${APP_NAME}" -n "${APP_NAMESPACE}" -o jsonpath="{.spec.ports[?(@.name == 'http')].port}")
            echo -n "${SERVICE_PORT}" | tee $(results.service-port.path)
          fi
          echo -n "${target}" | cut -f1 -d / | tee $(results.resource-type.path)
        done
      securityContext:
        privileged: true
      workingDir: $(params.source-dir)
  volumes:
    - emptyDir: {}
      name: source
