apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: react-
  annotations:
    app.openshift.io/runtime: nodejs
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Pipeline","metadata":{"annotations":{"app.openshift.io/runtime":"nodejs"},"name":"ibm-nodejs","namespace":"tools"},"spec":{"params":[{"description":"The
      url for the git
      repository","name":"git-url"},{"default":"master","description":"The git
      revision (branch, tag, or sha) that should be
      built","name":"git-revision"},{"default":"true","description":"Enable the
      pipeline to scan the image for
      vulnerabilities","name":"scan-image"},{"default":"true","description":"Enable
      the pipeline to lint the Dockerfile for best
      practices","name":"lint-dockerfile"}],"tasks":[{"name":"setup","params":[{"name":"git-url","value":"$(params.git-url)"},{"name":"git-revision","value":"$(params.git-revision)"},{"name":"scan-image","value":"$(params.scan-image)"},{"name":"lint-dockerfile","value":"$(params.lint-dockerfile)"}],"taskRef":{"name":"ibm-setup-v2-7-1"}},{"name":"test","params":[{"name":"git-url","value":"$(tasks.setup.results.git-url)"},{"name":"git-revision","value":"$(tasks.setup.results.git-revision)"},{"name":"source-dir","value":"$(tasks.setup.results.source-dir)"},{"name":"js-image","value":"$(tasks.setup.results.js-image)"},{"name":"app-name","value":"$(tasks.setup.results.app-name)"}],"runAfter":["setup"],"taskRef":{"name":"ibm-nodejs-test-v2-7-1"}},{"name":"dockerfile-lint","params":[{"name":"git-url","value":"$(tasks.setup.results.git-url)"},{"name":"git-revision","value":"$(tasks.setup.results.git-revision)"},{"name":"source-dir","value":"$(tasks.setup.results.source-dir)"},{"name":"lint-dockerfile","value":"$(tasks.setup.results.dockerfile-lint)"}],"runAfter":["test"],"taskRef":{"name":"ibm-dockerfile-lint-v2-7-1"}},{"name":"build","params":[{"name":"git-url","value":"$(tasks.setup.results.git-url)"},{"name":"git-revision","value":"$(tasks.setup.results.git-revision)"},{"name":"source-dir","value":"$(tasks.setup.results.source-dir)"},{"name":"image-server","value":"$(tasks.setup.results.image-server)"},{"name":"image-namespace","value":"$(tasks.setup.results.image-namespace)"},{"name":"image-repository","value":"$(tasks.setup.results.image-repository)"},{"name":"image-tag","value":"$(tasks.setup.results.image-tag)"}],"runAfter":["dockerfile-lint"],"taskRef":{"name":"ibm-build-tag-push-v2-7-1"}},{"name":"deploy","params":[{"name":"git-url","value":"$(tasks.setup.results.git-url)"},{"name":"git-revision","value":"$(tasks.setup.results.git-revision)"},{"name":"source-dir","value":"$(tasks.setup.results.source-dir)"},{"name":"image-server","value":"$(tasks.setup.results.image-server)"},{"name":"image-namespace","value":"$(tasks.setup.results.image-namespace)"},{"name":"image-repository","value":"$(tasks.setup.results.image-repository)"},{"name":"image-tag","value":"$(tasks.setup.results.image-tag)"},{"name":"app-namespace","value":"$(tasks.setup.results.app-namespace)"},{"name":"app-name","value":"$(tasks.setup.results.app-name)"},{"name":"deploy-ingress-type","value":"$(tasks.setup.results.deploy-ingress-type)"},{"name":"tools-image","value":"$(tasks.setup.results.tools-image)"}],"runAfter":["build"],"taskRef":{"name":"ibm-deploy-v2-7-1"}},{"name":"health","params":[{"name":"app-namespace","value":"$(tasks.setup.results.app-namespace)"},{"name":"app-name","value":"$(tasks.setup.results.app-name)"},{"name":"deploy-ingress-type","value":"$(tasks.setup.results.deploy-ingress-type)"},{"name":"health-protocol","value":"$(tasks.setup.results.health-protocol)"},{"name":"health-endpoint","value":"$(tasks.setup.results.health-endpoint)"},{"name":"health-url","value":"$(tasks.setup.results.health-url)"},{"name":"health-curl","value":"$(tasks.setup.results.health-curl)"},{"name":"tools-image","value":"$(tasks.setup.results.tools-image)"}],"runAfter":["deploy"],"taskRef":{"name":"ibm-health-check-v2-7-1"}},{"name":"tag-release","params":[{"name":"git-url","value":"$(tasks.setup.results.git-url)"},{"name":"git-revision","value":"$(tasks.setup.results.git-revision)"},{"name":"source-dir","value":"$(tasks.setup.results.source-dir)"},{"name":"js-image","value":"$(tasks.setup.results.js-image)"}],"runAfter":["health"],"taskRef":{"name":"ibm-tag-release-v2-7-1"}},{"name":"img-release","params":[{"name":"image-from","value":"$(tasks.setup.results.image-url)"},{"name":"image-to","value":"$(tasks.setup.results.image-release):$(tasks.tag-release.results.tag)"}],"runAfter":["tag-release"],"taskRef":{"name":"ibm-img-release-v2-7-1"}},{"name":"img-scan","params":[{"name":"image-url","value":"$(tasks.img-release.results.image-url)"},{"name":"scan-trivy","value":"$(tasks.setup.results.scan-trivy)"},{"name":"scan-ibm","value":"$(tasks.setup.results.scan-ibm)"}],"runAfter":["img-release"],"taskRef":{"name":"ibm-img-scan-v2-7-1"}},{"name":"helm-release","params":[{"name":"git-url","value":"$(tasks.setup.results.git-url)"},{"name":"git-revision","value":"$(tasks.setup.results.git-revision)"},{"name":"source-dir","value":"$(tasks.setup.results.source-dir)"},{"name":"image-url","value":"$(tasks.img-release.results.image-url)"},{"name":"app-name","value":"$(tasks.setup.results.app-name)"},{"name":"deploy-ingress-type","value":"$(tasks.setup.results.deploy-ingress-type)"},{"name":"tools-image","value":"$(tasks.setup.results.tools-image)"}],"runAfter":["img-scan"],"taskRef":{"name":"ibm-helm-release-v2-7-1"}},{"name":"gitops","params":[{"name":"app-name","value":"$(tasks.setup.results.app-name)"},{"name":"version","value":"$(tasks.tag-release.results.tag)"},{"name":"helm-url","value":"$(tasks.helm-release.results.helm-url)"},{"name":"tools-image","value":"$(tasks.setup.results.tools-image)"}],"runAfter":["helm-release"],"taskRef":{"name":"ibm-gitops-v2-7-1"}}]}}
  selfLink: /apis/tekton.dev/v1beta1/namespaces/ritu/pipelineruns/react-rfnsb
  resourceVersion: '31140174'
  name: react-rfnsb
  uid: 2137a3cf-7d09-484e-9b25-80a6eaec2b4c
  creationTimestamp: '2021-08-09T13:54:17Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:generateName': {}
          'f:labels':
            .: {}
            'f:triggers.tekton.dev/eventlistener': {}
            'f:triggers.tekton.dev/trigger': {}
            'f:triggers.tekton.dev/triggers-eventid': {}
        'f:spec':
          .: {}
          'f:params': {}
          'f:pipelineRef':
            .: {}
            'f:name': {}
      manager: openshift-pipelines-triggers-eventlistenersink
      operation: Update
      time: '2021-08-09T13:54:16Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:app.openshift.io/runtime': {}
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
          'f:labels':
            'f:tekton.dev/pipeline': {}
        'f:status':
          .: {}
          'f:completionTime': {}
          'f:conditions': {}
          'f:pipelineSpec':
            .: {}
            'f:params': {}
            'f:tasks': {}
          'f:startTime': {}
          'f:taskRuns':
            .: {}
            'f:react-rfnsb-build-8vskt':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
            'f:react-rfnsb-deploy-g7hjw':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:results': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
            'f:react-rfnsb-dockerfile-lint-dxt5f':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
            'f:react-rfnsb-setup-fbr7b':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskResults': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:results': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
            'f:react-rfnsb-test-6tp9w':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
      manager: openshift-pipelines-controller
      operation: Update
      time: '2021-08-09T15:02:55Z'
  namespace: ritu
  labels:
    tekton.dev/pipeline: react
    triggers.tekton.dev/eventlistener: tekton
    triggers.tekton.dev/trigger: ritu-patel-react-master
    triggers.tekton.dev/triggers-eventid: 3571f096-777d-4cf6-b6f6-11e975d6fe4a
spec:
  params:
    - name: git-url
      value: 'https://github.com/ritu-patel/react'
    - name: git-revision
      value: c4755840d69358024664c20ce4a7abda5a203092
  pipelineRef:
    name: react
  serviceAccountName: pipeline
  timeout: 1h0m0s
status:
  completionTime: '2021-08-09T14:54:21Z'
  conditions:
    - lastTransitionTime: '2021-08-09T14:54:21Z'
      message: PipelineRun "react-rfnsb" failed to finish within "1h0m0s"
      reason: PipelineRunTimeout
      status: 'False'
      type: Succeeded
  pipelineSpec:
    params:
      - description: The url for the git repository
        name: git-url
        type: string
      - default: master
        description: 'The git revision (branch, tag, or sha) that should be built'
        name: git-revision
        type: string
      - default: 'false'
        description: Enable the pipeline to scan the image for vulnerabilities
        name: scan-image
        type: string
      - default: 'false'
        description: Enable the pipeline to lint the Dockerfile for best practices
        name: lint-dockerfile
        type: string
    tasks:
      - name: setup
        params:
          - name: git-url
            value: $(params.git-url)
          - name: git-revision
            value: $(params.git-revision)
          - name: scan-image
            value: $(params.scan-image)
          - name: lint-dockerfile
            value: $(params.lint-dockerfile)
        taskRef:
          kind: Task
          name: ibm-setup-v2-7-1
      - name: test
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: js-image
            value: $(tasks.setup.results.js-image)
          - name: app-name
            value: $(tasks.setup.results.app-name)
        runAfter:
          - setup
        taskRef:
          kind: Task
          name: ibm-nodejs-test-v2-7-1
      - name: dockerfile-lint
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: lint-dockerfile
            value: $(tasks.setup.results.dockerfile-lint)
        runAfter:
          - test
        taskRef:
          kind: Task
          name: ibm-dockerfile-lint-v2-7-1
      - name: build
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: image-server
            value: $(tasks.setup.results.image-server)
          - name: image-namespace
            value: $(tasks.setup.results.image-namespace)
          - name: image-repository
            value: $(tasks.setup.results.image-repository)
          - name: image-tag
            value: $(tasks.setup.results.image-tag)
        runAfter:
          - dockerfile-lint
        taskRef:
          kind: Task
          name: ibm-build-tag-push-v2-7-1
      - name: deploy
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: image-server
            value: $(tasks.setup.results.image-server)
          - name: image-namespace
            value: $(tasks.setup.results.image-namespace)
          - name: image-repository
            value: $(tasks.setup.results.image-repository)
          - name: image-tag
            value: $(tasks.setup.results.image-tag)
          - name: app-namespace
            value: $(tasks.setup.results.app-namespace)
          - name: app-name
            value: $(tasks.setup.results.app-name)
          - name: deploy-ingress-type
            value: $(tasks.setup.results.deploy-ingress-type)
          - name: tools-image
            value: $(tasks.setup.results.tools-image)
        runAfter:
          - build
        taskRef:
          kind: Task
          name: ibm-deploy-v2-7-1
      - name: health
        params:
          - name: app-namespace
            value: $(tasks.setup.results.app-namespace)
          - name: app-name
            value: $(tasks.setup.results.app-name)
          - name: deploy-ingress-type
            value: $(tasks.setup.results.deploy-ingress-type)
          - name: health-protocol
            value: $(tasks.setup.results.health-protocol)
          - name: health-endpoint
            value: $(tasks.setup.results.health-endpoint)
          - name: health-url
            value: $(tasks.setup.results.health-url)
          - name: health-curl
            value: $(tasks.setup.results.health-curl)
          - name: tools-image
            value: $(tasks.setup.results.tools-image)
        runAfter:
          - deploy
        taskRef:
          kind: Task
          name: ibm-health-check-v2-7-1
      - name: tag-release
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: js-image
            value: $(tasks.setup.results.js-image)
        runAfter:
          - health
        taskRef:
          kind: Task
          name: ibm-tag-release-v2-7-1
      - name: img-release
        params:
          - name: image-from
            value: $(tasks.setup.results.image-url)
          - name: image-to
            value: >-
              $(tasks.setup.results.image-release):$(tasks.tag-release.results.tag)
        runAfter:
          - tag-release
        taskRef:
          kind: Task
          name: ibm-img-release-v2-7-1
      - name: img-scan
        params:
          - name: image-url
            value: $(tasks.img-release.results.image-url)
          - name: scan-trivy
            value: $(tasks.setup.results.scan-trivy)
          - name: scan-ibm
            value: $(tasks.setup.results.scan-ibm)
        runAfter:
          - img-release
        taskRef:
          kind: Task
          name: ibm-img-scan-v2-7-1
      - name: helm-release
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: image-url
            value: $(tasks.img-release.results.image-url)
          - name: app-name
            value: $(tasks.setup.results.app-name)
          - name: deploy-ingress-type
            value: $(tasks.setup.results.deploy-ingress-type)
          - name: tools-image
            value: $(tasks.setup.results.tools-image)
        runAfter:
          - img-scan
        taskRef:
          kind: Task
          name: ibm-helm-release-v2-7-1
      - name: gitops
        params:
          - name: app-name
            value: $(tasks.setup.results.app-name)
          - name: version
            value: $(tasks.tag-release.results.tag)
          - name: helm-url
            value: $(tasks.helm-release.results.helm-url)
          - name: tools-image
            value: $(tasks.setup.results.tools-image)
        runAfter:
          - helm-release
        taskRef:
          kind: Task
          name: ibm-gitops-v2-7-1
  startTime: '2021-08-09T13:54:17Z'
  taskRuns:
    react-rfnsb-build-8vskt:
      pipelineTaskName: build
      status:
        completionTime: '2021-08-09T14:02:50Z'
        conditions:
          - lastTransitionTime: '2021-08-09T14:02:50Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: react-rfnsb-build-8vskt-pod-fkvlw
        startTime: '2021-08-09T13:57:43Z'
        steps:
          - container: step-git-clone
            imageID: >-
              docker.io/alpine/git@sha256:0590372ee83d4d0ff4f08f8d2a98b0ba413d911a2e89c1d3418a1fed9a66337c
            name: git-clone
            terminated:
              containerID: >-
                cri-o://570ac97f1c133cde3ab74191c95b88c1957a915b0c447e308bbb82b12ab975a9
              exitCode: 0
              finishedAt: '2021-08-09T13:58:08Z'
              reason: Completed
              startedAt: '2021-08-09T13:57:57Z'
          - container: step-build
            imageID: >-
              quay.io/buildah/stable@sha256:04803d2144a2df5bf3aa2875f130e2b6cfc6ee45003125dc4df13f05f0898f9a
            name: build
            terminated:
              containerID: >-
                cri-o://271798c88e70622717af824952924eb12f4933f54656f84e2b036acbd352f4ea
              exitCode: 0
              finishedAt: '2021-08-09T14:02:47Z'
              reason: Completed
              startedAt: '2021-08-09T13:58:08Z'
        taskSpec:
          params:
            - name: git-url
              type: string
            - default: master
              name: git-revision
              type: string
            - default: /source
              name: source-dir
              type: string
            - default: ''
              name: image-server
              type: string
            - default: ''
              name: image-namespace
              type: string
            - default: ''
              name: image-repository
              type: string
            - default: ''
              name: image-tag
              type: string
            - default: 'quay.io/buildah/stable:v1.15.0'
              name: BUILDER_IMAGE
              type: string
            - default: ./Dockerfile
              name: DOCKERFILE
              type: string
            - default: .
              name: CONTEXT
              type: string
            - default: 'false'
              name: TLSVERIFY
              type: string
            - default: docker
              name: FORMAT
              type: string
            - default: overlay
              description: Set buildah storage driver
              name: STORAGE_DRIVER
              type: string
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: git-credentials
                      optional: true
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: git-credentials
                      optional: true
              image: quay.io/ibmgaragecloud/alpine-git
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    set -x
                    git clone $(params.git-url) $(params.source-dir)
                fi

                set -x

                cd $(params.source-dir)

                git checkout $(params.git-revision)
            - env:
                - name: REGISTRY_USER
                  valueFrom:
                    secretKeyRef:
                      key: REGISTRY_USER
                      name: registry-access
                      optional: true
                - name: REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: REGISTRY_PASSWORD
                      name: registry-access
                      optional: true
                - name: IBM_ENTITLED_REGISTRY_USER
                  valueFrom:
                    secretKeyRef:
                      key: IBM_ENTITLED_REGISTRY_USER
                      name: ibm-entitled-registry-credentials
                      optional: true
                - name: IBM_ENTITLED_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: IBM_ENTITLED_REGISTRY_PASSWORD
                      name: ibm-entitled-registry-credentials
                      optional: true
              image: $(params.BUILDER_IMAGE)
              name: build
              resources: {}
              script: >
                APP_IMAGE="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"

                if [[ -n "${IBM_ENTITLED_REGISTRY_USER}" ]] && [[ -n
                "${IBM_ENTITLED_REGISTRY_PASSWORD}" ]]; then
                  buildah login -u ${IBM_ENTITLED_REGISTRY_USER} -p ${IBM_ENTITLED_REGISTRY_PASSWORD} cp.icr.io
                  echo "buildah login -u \"${IBM_ENTITLED_REGISTRY_USER}\" -p \"xxxxx\" cp.icr.io"
                fi

                buildah --layers --storage-driver=$(params.STORAGE_DRIVER) bud
                --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) -f
                $(params.DOCKERFILE) -t ${APP_IMAGE} $(params.CONTEXT)

                set +x

                if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}"
                ]] && [[ "$(params.image-server)" !=
                "image-registry.openshift-image-registry.svc:5000"  ]]; then
                  buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "$(params.image-server)"
                  echo "buildah login -u \"${REGISTRY_USER}\" -p \"xxxxx\" \"$(params.image-server)\""
                fi


                set -x

                buildah --storage-driver=$(params.STORAGE_DRIVER) push
                --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest
                ${APP_IMAGE} docker://${APP_IMAGE}
              securityContext:
                privileged: true
              volumeMounts:
                - mountPath: /var/lib/containers
                  name: varlibcontainers
              workingDir: $(params.source-dir)
          volumes:
            - emptyDir: {}
              name: varlibcontainers
            - emptyDir: {}
              name: source
    react-rfnsb-deploy-g7hjw:
      pipelineTaskName: deploy
      status:
        completionTime: '2021-08-09T15:02:53Z'
        conditions:
          - lastTransitionTime: '2021-08-09T15:02:53Z'
            message: >-
              TaskRun "react-rfnsb-deploy-g7hjw" failed to finish within
              "1h0m0s"
            reason: TaskRunTimeout
            status: 'False'
            type: Succeeded
        podName: react-rfnsb-deploy-g7hjw-pod-gfbv8
        startTime: '2021-08-09T14:02:51Z'
        steps:
          - container: step-git-clone
            imageID: >-
              docker.io/alpine/git@sha256:0590372ee83d4d0ff4f08f8d2a98b0ba413d911a2e89c1d3418a1fed9a66337c
            name: git-clone
            terminated:
              containerID: >-
                cri-o://a20dd23b66dab567e91735d0953d2a2e682ef29c4f34f76a41112cccf5836610
              exitCode: 0
              finishedAt: '2021-08-09T14:03:15Z'
              reason: Completed
              startedAt: '2021-08-09T14:03:05Z'
          - container: step-deploy
            imageID: >-
              quay.io/ibmgaragecloud/ibmcloud-dev@sha256:a3a486b8ac5c99b9dad1ae3da35d3dcb4197274d9807ee896e2ea75349252bea
            name: deploy
            terminated:
              exitCode: 1
              finishedAt: '2021-08-09T15:02:53Z'
              reason: TaskRunTimeout
              startedAt: '2021-08-09T14:03:03Z'
        taskSpec:
          params:
            - name: git-url
              type: string
            - default: master
              name: git-revision
              type: string
            - default: /source
              name: source-dir
              type: string
            - default: ''
              name: image-server
              type: string
            - default: ''
              name: image-namespace
              type: string
            - default: ''
              name: image-repository
              type: string
            - default: ''
              name: image-tag
              type: string
            - default: ''
              name: app-namespace
              type: string
            - default: ''
              name: app-name
              type: string
            - default: route
              name: deploy-ingress-type
              type: string
            - default: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
              name: tools-image
              type: string
          results:
            - description: ''
              name: service-port
            - description: ''
              name: resource-type
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: git-credentials
                      optional: true
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: git-credentials
                      optional: true
              image: quay.io/ibmgaragecloud/alpine-git
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    set -x
                    git clone $(params.git-url) $(params.source-dir)
                fi

                set -x

                cd $(params.source-dir)

                git checkout $(params.git-revision)
            - env:
                - name: TLS_SECRET_NAME
                  valueFrom:
                    configMapKeyRef:
                      key: TLS_SECRET_NAME
                      name: ibmcloud-config
                      optional: true
                - name: INGRESS_SUBDOMAIN
                  valueFrom:
                    configMapKeyRef:
                      key: INGRESS_SUBDOMAIN
                      name: ibmcloud-config
                      optional: true
              image: $(params.tools-image)
              name: deploy
              resources: {}
              script: >
                #!/usr/bin/env bash

                set -ex

                GIT_URL="$(params.git-url)"

                GIT_REVISION="$(params.git-revision)"

                APP_NAMESPACE="$(params.app-namespace)"

                APP_NAME="$(params.app-name)"

                if [[ -z "${APP_NAME}" ]]; then
                  APP_NAME="$(params.image-repository)"
                fi

                IMAGE_SERVER="$(params.image-server)"

                IMAGE_NAMESPACE="$(params.image-namespace)"

                IMAGE_REPOSITORY="$(params.image-repository)"

                IMAGE_VERSION="$(params.image-tag)"

                IMAGE_URL="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/${IMAGE_REPOSITORY}"

                INGRESS_TYPE="$(params.deploy-ingress-type)"

                if [[ "${INGRESS_TYPE}" == "route" ]]; then
                  ROUTE_ENABLED="true"
                  INGRESS_ENABLED="false"
                else
                  ROUTE_ENABLED="false"
                  INGRESS_ENABLED="true"
                fi


                export CHART_ROOT=$(find . -name chart)

                echo "CHART_ROOT: $CHART_ROOT"


                FILE_NUM=$(find . -name 'Chart*.yaml' |wc -l)

                if [[ "${FILE_NUM}" -gt 1 ]]; then
                  echo "Error: Found >1 Chart*.yaml"
                  exit 1
                fi


                export CHART=$(find . -name 'Chart*.yaml')

                echo "CHART: $CHART"


                export CHART_NAME=$(cat $CHART | yq r - name)

                echo "CHART_NAME: $CHART_NAME"


                # Update Chart name and version

                if [[ "${CHART_NAME}" != "${APP_NAME}" ]]; then
                  echo "Renaming chart from ${CHART_NAME} to ${APP_NAME}"
                  cp -R "${CHART_ROOT}/${CHART_NAME}" "${CHART_ROOT}/${APP_NAME}"
                  cat "${CHART_ROOT}/${CHART_NAME}/Chart.yaml" | \
                      yq w - name "${APP_NAME}" | \
                      yq w - version "1.0.0-rc${IMAGE_VERSION}" > "${CHART_ROOT}/${APP_NAME}/Chart.yaml"
                else
                  echo "Chart name and image name match: ${APP_NAME}"
                fi


                CHART_PATH="${CHART_ROOT}/${APP_NAME}"


                RELEASE_NAME="${APP_NAME}"

                echo "RELEASE_NAME: $RELEASE_NAME"


                echo $(helm version)


                echo "CHECKING CHART (lint)"

                helm lint ${CHART_PATH}


                PREFIX=""

                if [[ -f "${CHART_PATH}/requirements.yaml" ]] || grep -Eq
                "^dependencies:" "${CHART_PATH}/Chart.yaml"; then
                    DEPENDENCY_FILE="${CHART_PATH}/Chart.yaml"
                    if [[ -f "${CHART_PATH}/requirements.yaml" ]]; then
                        DEPENDENCY_FILE="${CHART_PATH}/requirements.yaml"
                    fi

                    PREFIX="$(yq r -j "${DEPENDENCY_FILE}" | jq -r '.dependencies | .[] | .alias // .name' | head -1)."
                fi


                # Update helm chart with repository and tag values

                cat ${CHART_PATH}/values.yaml | \
                    yq w - "${PREFIX}nameOverride" "${APP_NAME}" | \
                    yq w - "${PREFIX}fullnameOverride" "${APP_NAME}" | \
                    yq w - "${PREFIX}vcsInfo.repoUrl" "${GIT_URL}" | \
                    yq w - "${PREFIX}vcsInfo.branch" "${GIT_REVISION}" | \
                    yq w - "${PREFIX}image.repository" "${IMAGE_URL}" | \
                    yq w - --style single "${PREFIX}image.tag" "${IMAGE_VERSION}" | \
                    yq w - "${PREFIX}ingress.enabled" "${INGRESS_ENABLED}" | \
                    yq w - "${PREFIX}route.enabled" "${ROUTE_ENABLED}" > ./values.yaml.tmp
                cp ./values.yaml.tmp ${CHART_PATH}/values.yaml

                cat ${CHART_PATH}/values.yaml


                helm dep update "${CHART_PATH}"


                # Using 'upgrade --install" for rolling updates. Note that
                subsequent updates will occur in the same namespace the release
                is currently deployed in, ignoring the explicit--namespace
                argument".

                helm template ${RELEASE_NAME} ${CHART_PATH} \
                    --namespace ${APP_NAMESPACE} \
                    --set ${PREFIX}ingress.tlsSecretName="${TLS_SECRET_NAME}" \
                    --set ${PREFIX}ingress.subdomain="${INGRESS_SUBDOMAIN}" > ./release.yaml

                echo -e "Generated release yaml for:
                ${APP_NAMESPACE}/${APP_NAME}"

                cat ./release.yaml


                echo -e "Deploying into: ${APP_NAMESPACE}/${APP_NAME}"

                kubectl apply -n ${APP_NAMESPACE} -f ./release.yaml
                --validate=false > results.out

                cat results.out

                echo "Waiting for rollout of ${APP_NAMESPACE}/${APP_NAME}"



                cat results.out | \
                  grep -E "deployment|statefulset|integrationserver|queuemanager" | \
                  sed "s/deployment.apps/deployment/g" | \
                  sed "s/statefulset.apps/statefulset/g" | \
                  sed "s/configured//g" | \
                  sed "s/created//g" | \
                  sed "s/unchanged//g" | while read target; do
                  echo "Waiting for rollout of ${target} in ${APP_NAMESPACE}"
                  if [[ ${target} == *"integrationserver"* ]]; then
                    kubectl wait --timeout=-1s --for=condition=Ready ${target}
                  elif [[ ${target} == *"queuemanager"* ]]; then
                    until [[ "$(kubectl get ${target} -o 'jsonpath={.status.phase}')" = "Running" ]];
                    do
                    sleep 5
                    echo "Waiting for Queuemanager to be ready."
                    done
                  else
                    kubectl rollout status -n ${APP_NAMESPACE} ${target}
                    SERVICE_PORT=$(kubectl get svc "${APP_NAME}" -n "${APP_NAMESPACE}" -o jsonpath="{.spec.ports[?(@.name == 'http')].port}")
                    echo -n "${SERVICE_PORT}" | tee $(results.service-port.path)
                  fi
                  echo -n "${target}" | cut -f1 -d / | tee $(results.resource-type.path)
                done
              securityContext:
                privileged: true
              workingDir: $(params.source-dir)
          volumes:
            - emptyDir: {}
              name: source
    react-rfnsb-dockerfile-lint-dxt5f:
      pipelineTaskName: dockerfile-lint
      status:
        completionTime: '2021-08-09T13:57:41Z'
        conditions:
          - lastTransitionTime: '2021-08-09T13:57:41Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: react-rfnsb-dockerfile-lint-dxt5f-pod-74dl7
        startTime: '2021-08-09T13:57:17Z'
        steps:
          - container: step-git-clone
            imageID: >-
              docker.io/alpine/git@sha256:0590372ee83d4d0ff4f08f8d2a98b0ba413d911a2e89c1d3418a1fed9a66337c
            name: git-clone
            terminated:
              containerID: >-
                cri-o://2cd0389777f224823a7450549cc7b389c941fe137bc7236c341260072b8497bf
              exitCode: 0
              finishedAt: '2021-08-09T13:57:39Z'
              reason: Completed
              startedAt: '2021-08-09T13:57:26Z'
          - container: step-lint
            imageID: >-
              ghcr.io/hadolint/hadolint@sha256:5b254373b132b39593c1a4720879b1f402fda2030ca04208797126e553cd1282
            name: lint
            terminated:
              containerID: >-
                cri-o://3060decb436aa0c08cd862cdb259c90bdad9a1758e765db5223c7921d5334ac1
              exitCode: 0
              finishedAt: '2021-08-09T13:57:40Z'
              reason: Completed
              startedAt: '2021-08-09T13:57:40Z'
        taskSpec:
          params:
            - name: git-url
              type: string
            - default: master
              name: git-revision
              type: string
            - default: /source
              name: source-dir
              type: string
            - default: Dockerfile
              name: DOCKERFILE
              type: string
            - default: .
              name: CONTEXT
              type: string
            - default: 'ghcr.io/hadolint/hadolint:v2.3.0-alpine'
              name: LINT_IMAGE
              type: string
            - default: 'true'
              name: lint-dockerfile
              type: string
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: git-credentials
                      optional: true
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: git-credentials
                      optional: true
              image: alpine/git
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    set -x
                    git clone $(params.git-url) $(params.source-dir)
                fi

                set -x

                cd $(params.source-dir)

                git checkout $(params.git-revision)
            - env:
                - name: HADOLINT_CFG
                  valueFrom:
                    configMapKeyRef:
                      key: HADOLINT_CFG
                      name: hadolint-config
                      optional: true
              image: $(params.LINT_IMAGE)
              name: lint
              resources: {}
              script: >
                PERFORM_LINT="$(params.lint-dockerfile)"

                if [[ "${PERFORM_LINT}" == "false" ]] || [[ -z "${PERFORM_LINT}"
                ]]; then
                  echo "User selected to skip Dockerfile linting. Skipping this task."
                  exit 0
                fi


                FILE="$(params.source-dir)"/.hadolint.yaml


                if [ -f "${HADOLINT_CFG}" ]; then
                  FILE="$(params.source-dir)/${HADOLINT_CFG}"
                  echo "In this step, hadolint will lint your Dockerfile, using ${FILE}, with the following rules: "
                  cat ${FILE}
                  echo "For more information about hadolint please refer to https://cloudnativetoolkit.dev/"
                  hadolint --config ${HADOLINT_CFG} $(params.DOCKERFILE)

                elif [ -f "${FILE}" ]; then
                  echo "In this step, hadolint will lint your Dockerfile, using .hadolint.yaml in your repository, with the following rules: "
                  cat "${FILE}"
                  echo "For more information about hadolint please refer to https://cloudnativetoolkit.dev/"
                  hadolint $(params.DOCKERFILE)

                else
                  echo "In this step, hadolint will lint your Dockerfile"
                  echo "If you would like to configure hadolint, please see https://github.com/hadolint/hadolint"
                  echo "For more information about hadolint please refer to https://cloudnativetoolkit.dev/"
                  hadolint $(params.DOCKERFILE)
                fi
              workingDir: $(params.source-dir)
          volumes:
            - emptyDir: {}
              name: source
    react-rfnsb-setup-fbr7b:
      pipelineTaskName: setup
      status:
        completionTime: '2021-08-09T13:54:49Z'
        conditions:
          - lastTransitionTime: '2021-08-09T13:54:49Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: react-rfnsb-setup-fbr7b-pod-qjwb6
        startTime: '2021-08-09T13:54:19Z'
        steps:
          - container: step-git-clone
            imageID: >-
              docker.io/alpine/git@sha256:0590372ee83d4d0ff4f08f8d2a98b0ba413d911a2e89c1d3418a1fed9a66337c
            name: git-clone
            terminated:
              containerID: >-
                cri-o://b00a7bc8c734db9d64619bdf0319b34262851bb3f69bed0ad208ed13b5bfa5d0
              exitCode: 0
              finishedAt: '2021-08-09T13:54:47Z'
              message: >-
                [{"key":"ace-project","value":"","type":"TaskRunResult"},{"key":"app-name","value":"react","type":"TaskRunResult"},{"key":"app-namespace","value":"ritu","type":"TaskRunResult"},{"key":"deploy-ingress-type","value":"route","type":"TaskRunResult"},{"key":"dockerfile-lint","value":"false","type":"TaskRunResult"},{"key":"git-revision","value":"c4755840d69358024664c20ce4a7abda5a203092","type":"TaskRunResult"},{"key":"git-url","value":"https://github.com/ritu-patel/react","type":"TaskRunResult"},{"key":"health-curl","value":"-k","type":"TaskRunResult"},{"key":"health-endpoint","value":"/health","type":"TaskRunResult"},{"key":"health-protocol","value":"https","type":"TaskRunResult"},{"key":"health-url","value":"","type":"TaskRunResult"},{"key":"image-namespace","value":"ritu","type":"TaskRunResult"},{"key":"image-release","value":"image-registry.openshift-image-registry.svc:5000/ritu/react","type":"TaskRunResult"},{"key":"image-repository","value":"react","type":"TaskRunResult"},{"key":"image-server","value":"image-registry.openshift-image-registry.svc:5000","type":"TaskRunResult"},{"key":"image-tag","value":"c4755840","type":"TaskRunResult"},{"key":"image-url","value":"image-registry.openshift-image-registry.svc:5000/ritu/react:c4755840","type":"TaskRunResult"},{"key":"js-image","value":"quay.io/ibmgaragecloud/node:lts-stretch","type":"TaskRunResult"},{"key":"scan-ibm","value":"false","type":"TaskRunResult"},{"key":"scan-image","value":"false","type":"TaskRunResult"},{"key":"scan-trivy","value":"false","type":"TaskRunResult"},{"key":"source-dir","value":"/source","type":"TaskRunResult"},{"key":"tools-image","value":"quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4","type":"TaskRunResult"}]
              reason: Completed
              startedAt: '2021-08-09T13:54:35Z'
        taskResults:
          - name: ace-project
            value: ''
          - name: app-name
            value: react
          - name: app-namespace
            value: ritu
          - name: deploy-ingress-type
            value: route
          - name: dockerfile-lint
            value: 'false'
          - name: git-revision
            value: c4755840d69358024664c20ce4a7abda5a203092
          - name: git-url
            value: 'https://github.com/ritu-patel/react'
          - name: health-curl
            value: '-k'
          - name: health-endpoint
            value: /health
          - name: health-protocol
            value: https
          - name: health-url
            value: ''
          - name: image-namespace
            value: ritu
          - name: image-release
            value: 'image-registry.openshift-image-registry.svc:5000/ritu/react'
          - name: image-repository
            value: react
          - name: image-server
            value: 'image-registry.openshift-image-registry.svc:5000'
          - name: image-tag
            value: c4755840
          - name: image-url
            value: >-
              image-registry.openshift-image-registry.svc:5000/ritu/react:c4755840
          - name: js-image
            value: 'quay.io/ibmgaragecloud/node:lts-stretch'
          - name: scan-ibm
            value: 'false'
          - name: scan-image
            value: 'false'
          - name: scan-trivy
            value: 'false'
          - name: source-dir
            value: /source
          - name: tools-image
            value: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
        taskSpec:
          params:
            - description: The url for the git repository
              name: git-url
              type: string
            - default: master
              description: 'The git revision (branch, tag, or sha) that should be built'
              name: git-revision
              type: string
            - default: /source
              name: source-dir
              type: string
            - default: ''
              description: The dev image (use image-release for released image)
              name: image-url
              type: string
            - default: ''
              description: The dev image registry server if params.image-url not provided
              name: image-server
              type: string
            - default: ''
              description: >-
                The dev image registry namespace if params.image-url not
                provided
              name: image-namespace
              type: string
            - default: ''
              description: >-
                The dev image registry repository/imagename if params.image-url
                not provided
              name: image-repository
              type: string
            - default: ''
              description: The dev image registry tag if params.image-url not provided
              name: image-tag
              type: string
            - default: ''
              description: The url of final released image
              name: image-release
              type: string
            - default: ''
              description: The openshift/kubernetes namespace to deploy dev app
              name: app-namespace
              type: string
            - default: ''
              description: >-
                The app name to be use in openshift/kuberentes deployment and
                helm chart
              name: app-name
              type: string
            - default: route
              name: deploy-ingress-type
              type: string
            - default: https
              name: health-protocol
              type: string
            - default: /health
              description: >-
                Endpoint to check health after deployment, liberty uses / not
                /health
              name: health-endpoint
              type: string
            - default: ''
              description: Override for health check url
              name: health-url
              type: string
            - default: '-k'
              description: Override for health check curl flags
              name: health-curl
              type: string
            - default: 'false'
              description: >-
                Flag indicating that a Vulnerability Advisor scan should be
                performed
              name: scan-image
              type: string
            - default: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
              name: tools-image
              type: string
            - default: 'quay.io/ibmgaragecloud/node:lts-stretch'
              name: js-image
              type: string
            - default: ''
              description: Name of the ACE Toolkit project
              name: ace-project
              type: string
            - default: 'true'
              description: Flag indication that Dockerfile will be linted
              name: lint-dockerfile
              type: string
          results:
            - description: ''
              name: git-url
            - description: ''
              name: git-revision
            - description: ''
              name: source-dir
            - description: ''
              name: image-url
            - description: ''
              name: image-server
            - description: ''
              name: image-namespace
            - description: ''
              name: image-repository
            - description: ''
              name: image-tag
            - description: ''
              name: image-release
            - description: ''
              name: app-namespace
            - description: ''
              name: app-name
            - description: ''
              name: deploy-ingress-type
            - description: ''
              name: health-protocol
            - description: ''
              name: health-endpoint
            - description: ''
              name: health-url
            - description: ''
              name: health-curl
            - description: ''
              name: tools-image
            - description: ''
              name: js-image
            - description: ''
              name: scan-image
            - description: ''
              name: scan-trivy
            - description: ''
              name: scan-ibm
            - description: ''
              name: ace-project
            - description: ''
              name: dockerfile-lint
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: git-credentials
                      optional: true
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: git-credentials
                      optional: true
                - name: REGISTRY_RELEASE_SERVER
                  valueFrom:
                    secretKeyRef:
                      key: REGISTRY_URL
                      name: registry-access
                      optional: true
                - name: REGISTRY_RELEASE_NAMESPACE
                  valueFrom:
                    secretKeyRef:
                      key: REGISTRY_NAMESPACE
                      name: registry-access
                      optional: true
              image: quay.io/ibmgaragecloud/alpine-git
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    git clone $(params.git-url) $(params.source-dir)
                fi

                cd $(params.source-dir)

                git checkout $(params.git-revision)


                # Results

                # Defaults

                echo -n "$(params.git-url)">$(results.git-url.path)

                echo -n "$(git rev-parse --verify
                HEAD)">$(results.git-revision.path)

                echo -n "$(params.source-dir)">$(results.source-dir.path)

                echo -n "$(params.app-namespace)">$(results.app-namespace.path)

                echo -n "$(params.app-name)">$(results.app-name.path)

                echo -n
                "$(params.deploy-ingress-type)">$(results.deploy-ingress-type.path)

                echo -n
                "$(params.health-protocol)">$(results.health-protocol.path)

                echo -n
                "$(params.health-endpoint)">$(results.health-endpoint.path)

                echo -n "$(params.health-url)">$(results.health-url.path)

                echo -n "$(params.health-curl)">$(results.health-curl.path)

                echo -n "$(params.tools-image)">$(results.tools-image.path)

                echo -n "$(params.js-image)">$(results.js-image.path)

                echo -n "$(params.ace-project)">$(results.ace-project.path)



                REGISTRY_SERVER="$(params.image-server)"

                REGISTRY_NAMESPACE="$(params.image-namespace)"

                REGISTRY_REPOSITORY="$(params.image-repository)"

                REGISTRY_TAG="$(params.image-tag)"


                if [[ -n "$(params.image-url)" ]]; then
                  REGISTRY_SERVER_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $1}')
                  if [[ -n "${REGISTRY_SERVER_VALUE}" ]]; then
                    REGISTRY_SERVER="${REGISTRY_SERVER_VALUE}"
                  fi

                  REGISTRY_NAMESPACE_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $2}')
                  if [[ -n "${REGISTRY_NAMESPACE_VALUE}" ]]; then
                    if [[ "${REGISTRY_NAMESPACE_VALUE}" = '$NAMESPACE' ]]; then
                      REGISTRY_NAMESPACE=${NAMESPACE}
                    else
                      REGISTRY_NAMESPACE="${REGISTRY_NAMESPACE_VALUE}"
                    fi
                  fi

                  REGISTRY_REPOSITORY_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' |  awk -F : '{print $1}')
                  if [[ -n "${REGISTRY_REPOSITORY_VALUE}" ]]; then
                    REGISTRY_REPOSITORY="${REGISTRY_REPOSITORY_VALUE}"
                  fi

                  REGISTRY_TAG_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $2}')
                  if [[ -n "${REGISTRY_TAG_VALUE}" ]]; then
                    REGISTRY_TAG="${REGISTRY_TAG_VALUE}"
                  fi
                fi


                if [[ -z "${REGISTRY_SERVER}" ]]; then
                  # Assume is internal
                  REGISTRY_SERVER="image-registry.openshift-image-registry.svc:5000"
                fi

                if [[ -z "${REGISTRY_NAMESPACE}" ]]; then
                  # Assume current k8s namespace
                  REGISTRY_NAMESPACE="${NAMESPACE}"
                fi

                if [[ -z "${REGISTRY_REPOSITORY}" ]]; then
                  # Assume repo dir is image repository/image-name
                  REGISTRY_REPOSITORY="$(basename $(echo -n $(git config --get remote.origin.url)) .git | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')"
                fi

                if [[ -z "${REGISTRY_TAG}" ]]; then
                  # Assume short git commit revision
                  REGISTRY_TAG="$(git rev-parse --verify HEAD --short)"
                fi

                echo -n "${REGISTRY_SERVER}">$(results.image-server.path)

                echo -n "${REGISTRY_NAMESPACE}">$(results.image-namespace.path)

                echo -n
                "${REGISTRY_REPOSITORY}">$(results.image-repository.path)

                echo -n "${REGISTRY_TAG}">$(results.image-tag.path)

                echo -n
                "${REGISTRY_SERVER}/${REGISTRY_NAMESPACE}/${REGISTRY_REPOSITORY}:${REGISTRY_TAG}">$(results.image-url.path)


                if [[ -z "$(params.app-namespace)" ]]; then
                  # Assume current namespace
                  echo -n "${NAMESPACE}">$(results.app-namespace.path)
                fi


                if [[ -z "$(params.app-name)" ]]; then
                  # Assume image repository/name
                  echo -n "${REGISTRY_REPOSITORY}">$(results.app-name.path)
                fi



                if [[ -n "$(params.image-release)" ]]; then
                  REGISTRY_RELEASE_SERVER_VALUE=$(echo "$(params.image-release)" | awk -F / '{print $1}')
                  if [[ -n "${REGISTRY_RELEASE_SERVER_VALUE}" ]]; then
                    REGISTRY_RELEASE_SERVER="${REGISTRY_RELEASE_SERVER_VALUE}"
                  fi

                  REGISTRY_RELEASE_NAMESPACE_VALUE=$(echo "$(params.image-release)" | awk -F / '{print $2}')
                  if [[ -n "${REGISTRY_RELEASE_NAMESPACE_VALUE}" ]]; then
                    if [[ "${REGISTRY_RELEASE_NAMESPACE_VALUE}" = '$NAMESPACE' ]]; then
                      REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}
                    else
                      REGISTRY_RELEASE_NAMESPACE="${REGISTRY_RELEASE_NAMESPACE_VALUE}"
                    fi
                  elif [[ "${REGISTRY_RELEASE_SERVER}" = "image-registry.openshift-image-registry.svc:5000" ]]; then
                    REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}
                  fi
                fi

                if [[ -z "${REGISTRY_RELEASE_NAMESPACE}" ]]; then
                  # Assume current k8s namespace
                  REGISTRY_RELEASE_NAMESPACE="${NAMESPACE}"
                fi

                if [[ -z "${REGISTRY_RELEASE_SERVER}" ]]; then
                  # Assume internal registry
                  REGISTRY_RELEASE_SERVER="image-registry.openshift-image-registry.svc:5000"
                fi

                REGISTRY_RELEASE_URL="${REGISTRY_RELEASE_SERVER}/${REGISTRY_RELEASE_NAMESPACE}/${REGISTRY_REPOSITORY}"

                echo -n "${REGISTRY_RELEASE_URL}">$(results.image-release.path)


                PERFORM_SCAN="$(params.scan-image)"

                PERFORM_SCAN_IBM="false"

                PERFORM_SCAN_TRIVY="false"

                if [[ "${PERFORM_SCAN}" == "true" ]]; then
                  echo "User selected to perform container image scanning"
                  if echo "$REGISTRY_RELEASE_URL" | grep 'icr.io'; then
                    echo "Using IBM Container registry, enabling scanning using VA"
                    PERFORM_SCAN_IBM="true"
                  else
                    echo "Not using IBM Container registry, enabling scanning using trivy"
                    PERFORM_SCAN_TRIVY="true"
                  fi
                fi


                echo -n "${PERFORM_SCAN}">$(results.scan-image.path)

                echo -n "${PERFORM_SCAN_TRIVY}">$(results.scan-trivy.path)

                echo -n "${PERFORM_SCAN_IBM}">$(results.scan-ibm.path)


                if [[ -z "$(params.ace-project)" ]]; then
                  # Retrieve name of ACE Toolkit project
                  ACE_PROJECT=$(ls workspace || true)
                  echo -n "${ACE_PROJECT}">$(results.ace-project.path)
                fi


                PERFORM_LINT="$(params.lint-dockerfile)"

                echo -n "${PERFORM_LINT}">$(results.dockerfile-lint.path)


                for f in /tekton/results/*; do echo "results.$(basename
                $f)=$(cat $f)"; done
          volumes:
            - emptyDir: {}
              name: source
    react-rfnsb-test-6tp9w:
      pipelineTaskName: test
      status:
        completionTime: '2021-08-09T13:57:14Z'
        conditions:
          - lastTransitionTime: '2021-08-09T13:57:14Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: react-rfnsb-test-6tp9w-pod-rgkqf
        startTime: '2021-08-09T13:54:51Z'
        steps:
          - container: step-git-clone
            imageID: >-
              docker.io/alpine/git@sha256:0590372ee83d4d0ff4f08f8d2a98b0ba413d911a2e89c1d3418a1fed9a66337c
            name: git-clone
            terminated:
              containerID: >-
                cri-o://f47849a310102ed3932a91d5bc5a15c421f643df83bb778824bba1e8faa244a8
              exitCode: 0
              finishedAt: '2021-08-09T13:55:16Z'
              reason: Completed
              startedAt: '2021-08-09T13:55:06Z'
          - container: step-build
            imageID: >-
              quay.io/ibmgaragecloud/node@sha256:341976f40d963a425d627a349a9b0034e1eafffbf4c82a173c1465ee403878d9
            name: build
            terminated:
              containerID: >-
                cri-o://33e2e32967ce2d9e8d2b3a21e09e5d02c5fe6dd231ae7a1a4abe4b95087ff9b6
              exitCode: 0
              finishedAt: '2021-08-09T13:56:33Z'
              reason: Completed
              startedAt: '2021-08-09T13:55:16Z'
          - container: step-test
            imageID: >-
              quay.io/ibmgaragecloud/node@sha256:341976f40d963a425d627a349a9b0034e1eafffbf4c82a173c1465ee403878d9
            name: test
            terminated:
              containerID: >-
                cri-o://a0029b43430c08bb4a4767bc63f67b1dc3ab4e672f770a2d937bd9cb3ee18763
              exitCode: 0
              finishedAt: '2021-08-09T13:56:39Z'
              reason: Completed
              startedAt: '2021-08-09T13:56:34Z'
          - container: step-publish-pact
            imageID: >-
              quay.io/ibmgaragecloud/node@sha256:341976f40d963a425d627a349a9b0034e1eafffbf4c82a173c1465ee403878d9
            name: publish-pact
            terminated:
              containerID: >-
                cri-o://ad38df5fb5200bb509efa07698836f23a01d063981b43964c0655433aea2ddee
              exitCode: 0
              finishedAt: '2021-08-09T13:56:39Z'
              reason: Completed
              startedAt: '2021-08-09T13:56:39Z'
          - container: step-verify-pact
            imageID: >-
              quay.io/ibmgaragecloud/node@sha256:341976f40d963a425d627a349a9b0034e1eafffbf4c82a173c1465ee403878d9
            name: verify-pact
            terminated:
              containerID: >-
                cri-o://35a56173f7ec0866d51025dc0560b71133dca396dfddb9fc5336fed6cb6c151b
              exitCode: 0
              finishedAt: '2021-08-09T13:56:39Z'
              reason: Completed
              startedAt: '2021-08-09T13:56:39Z'
          - container: step-sonar-scan
            imageID: >-
              quay.io/ibmgaragecloud/sonarsource-sonar-scanner-cli@sha256:2475fbf611c8111fc5a212087f2c52dece4f50aa977682f076bb7118d34a8a3a
            name: sonar-scan
            terminated:
              containerID: >-
                cri-o://596ce53ae11f0887f3d657ccfce2fa491930334aa912daccd7b546410f03efd4
              exitCode: 0
              finishedAt: '2021-08-09T13:57:12Z'
              reason: Completed
              startedAt: '2021-08-09T13:56:40Z'
        taskSpec:
          params:
            - name: git-url
              type: string
            - default: master
              name: git-revision
              type: string
            - default: ''
              name: app-name
              type: string
            - default: /source
              name: source-dir
              type: string
            - default: 'quay.io/ibmgaragecloud/node:lts-stretch'
              name: js-image
              type: string
            - default: quay.io/ibmgaragecloud/sonarsource-sonar-scanner-cli
              name: sonarqube-cli
              type: string
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: git-credentials
                      optional: true
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: git-credentials
                      optional: true
              image: quay.io/ibmgaragecloud/alpine-git
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    set -x
                    git clone $(params.git-url) $(params.source-dir)
                fi

                set -x

                cd $(params.source-dir)

                git checkout $(params.git-revision)
            - env:
                - name: npm_config_registry
                  valueFrom:
                    secretKeyRef:
                      key: npm_config_registry
                      name: npm-config
                      optional: true
              image: $(params.js-image)
              name: build
              resources: {}
              script: |
                npm install
                if [ -d client ]; then
                  cd client
                  npm install
                  cd -
                fi
                npm run build --if-present
              workingDir: $(params.source-dir)
            - image: $(params.js-image)
              name: test
              resources: {}
              script: |
                CI=true npm test
              workingDir: $(params.source-dir)
            - env:
                - name: PACTBROKER_URL
                  valueFrom:
                    secretKeyRef:
                      key: PACTBROKER_URL
                      name: pactbroker-access
                      optional: true
              image: $(params.js-image)
              name: publish-pact
              resources: {}
              script: |
                if [ -n "${PACTBROKER_URL}" ]; then
                    npm run pact:publish --if-present
                else
                    echo "Skipping Pact publish"
                fi
              workingDir: $(params.source-dir)
            - env:
                - name: PACTBROKER_URL
                  valueFrom:
                    secretKeyRef:
                      key: PACTBROKER_URL
                      name: pactbroker-access
                      optional: true
              image: $(params.js-image)
              name: verify-pact
              resources: {}
              script: |
                if [ -n "${PACTBROKER_URL}" ]; then
                    npm run pact:verify --if-present
                else
                    echo "Skipping Pact publish"
                fi
              workingDir: $(params.source-dir)
            - env:
                - name: SONAR_USER_HOME
                  value: $(params.source-dir)
                - name: SONARQUBE_URL
                  valueFrom:
                    secretKeyRef:
                      key: SONARQUBE_URL
                      name: sonarqube-access
                      optional: true
                - name: SONARQUBE_USER
                  valueFrom:
                    secretKeyRef:
                      key: SONARQUBE_USER
                      name: sonarqube-access
                      optional: true
                - name: SONARQUBE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: SONARQUBE_PASSWORD
                      name: sonarqube-access
                      optional: true
              image: $(params.sonarqube-cli)
              name: sonar-scan
              resources: {}
              script: |
                APP_NAME=$(params.app-name)

                if ! command -v sonar-scanner &> /dev/null
                then
                    echo "Skipping SonarQube step, no task defined"
                    exit 0
                fi

                if [ -n "${SONARQUBE_URL}" ]; then

                   sonar-scanner \
                    -Dsonar.login=${SONARQUBE_USER} \
                    -Dsonar.password=${SONARQUBE_PASSWORD} \
                    -Dsonar.host.url=${SONARQUBE_URL} \
                    -Dsonar.projectKey=${APP_NAME}

                else
                    echo "Skipping Sonar Qube step"
                fi
              workingDir: $(params.source-dir)
          volumes:
            - emptyDir: {}
              name: source
